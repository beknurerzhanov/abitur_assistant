import React, { useState, useEffect, useRef} from 'react';
import { sendMessage, clearChat, uploadFile } from './api/chat';

import { BrowserRouter as Router, Routes, Route, Link,  useNavigate, useLocation } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';
import { FiUpload, FiFileText, FiAlertTriangle, FiCheckCircle } from 'react-icons/fi';
import './App.css';

function App() {
  const [isHovering, setIsHovering] = useState(false);
  const [mousePos, setMousePos] = useState({ x: 0, y: 0 });
  
  // Custom cursor effect
  useEffect(() => {
    const cursor = document.createElement('div');
    cursor.className = 'custom-cursor';
    document.body.appendChild(cursor);
    
    const follower = document.createElement('div');
    follower.className = 'cursor-follower';
    document.body.appendChild(follower);
    
    const moveCursor = (e) => {
      setMousePos({ x: e.clientX, y: e.clientY });
      cursor.style.left = `${e.clientX}px`;
      cursor.style.top = `${e.clientY}px`;
      
      setTimeout(() => {
        follower.style.left = `${e.clientX}px`;
        follower.style.top = `${e.clientY}px`;
      }, 100);
    };
    
    document.addEventListener('mousemove', moveCursor);
    
    return () => {
      document.removeEventListener('mousemove', moveCursor);
      document.body.removeChild(cursor);
      document.body.removeChild(follower);
    };
  }, []);

  // Create particles
  useEffect(() => {
    const particlesContainer = document.querySelector('.particles');
    if (!particlesContainer) return;
    
    const particleCount = 30;
    
    for (let i = 0; i < particleCount; i++) {
      const particle = document.createElement('div');
      particle.className = 'particle';
      
      const size = Math.random() * 10 + 5;
      const posX = Math.random() * 100;
      const duration = Math.random() * 10 + 5;
      const delay = Math.random() * 5;
      
      particle.style.width = `${size}px`;
      particle.style.height = `${size}px`;
      particle.style.left = `${posX}%`;
      particle.style.animationDuration = `${duration}s`;
      particle.style.animationDelay = `${delay}s`;
      particle.style.opacity = Math.random() * 0.5 + 0.1;
      
      particlesContainer.appendChild(particle);
    }
  }, []);

  return (
    <Router>
      <div className="app">
        <div className="particles"></div>
        
        <header className="navbar">
          <div className="logo">Claire</div>
          <nav className="nav-links">
            {['–ì–ª–∞–≤–Ω–∞—è', '–ß–∞—Ç', '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–ü—Ä–æ—Ñ–∏–ª—å', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–ü—Ä–æ–≤–µ—Ä–∫–∞'].map((item) => (
              <Link
                key={item}
                to={item === '–ì–ª–∞–≤–Ω–∞—è' ? '/' : `/${item.toLowerCase()}`}
                onMouseEnter={() => setIsHovering(true)}
                onMouseLeave={() => setIsHovering(false)}
                className="nav-link"
              >
                {item}
              </Link>
            ))}
          </nav>
         
        </header>

        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/—á–∞—Ç" element={<ChatPage />} />
          <Route path="/—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏" element={<InternshipsPage />} />
          <Route path="/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" element={<SchedulePage />} />
          <Route path="/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è" element={<EventsPage />} />
          <Route path="/–ø—Ä–æ—Ñ–∏–ª—å" element={<ProfilePage />} />
          <Route path="/auth" element={<AuthPage />} />
          <Route path="/–∞–Ω–∞–ª–∏—Ç–∏–∫–∞" element={<AnalyticsPage />} />
          <Route path="/–ü—Ä–æ–≤–µ—Ä–∫–∞" element={<PlagiarismCheckPage />} />

        </Routes>
      </div>
    </Router>
  );
}

function HomePage() {
  const [isHovering, setIsHovering] = useState(false);

  return (
    <main className="main-content">
      <div className="text-content">
        <h1>
          –ë—É–¥—É—â–µ–µ <span className="gray">–≤</span> <br />
          –ò–ò <span className="black">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏</span>
        </h1>

        <p className="mission">
          –ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –≤—Å—ë–º –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò.
        </p>
        
        <div className="cta-boxes">
          <Link 
            to="/—á–∞—Ç" 
            className="box migrate"
            onMouseEnter={() => setIsHovering(true)}
            onMouseLeave={() => setIsHovering(false)}
          >
            <h3>–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ß–∞—Ç</h3>
      
          </Link>

          <Link 
            to="/auth" 
            className="box migrate"
            onMouseEnter={() => setIsHovering(true)}
            onMouseLeave={() => setIsHovering(false)}
          >
            <h3>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</h3>
            <p>‚Üí</p>
          </Link>
          
        </div>
      </div>

      <div className="sphere large-sphere"></div>
      <div className="sphere small-sphere"></div>
      <div className="sphere tiny-sphere"></div>
    </main>
  );
}

const ChatPage = () => {
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [history, setHistory] = useState([
    '–ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é?',
    '–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–µ–π—á–∞—Å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã?',
    '–ö–∞–∫–æ–π –ª—É—á—à–∏–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è React?'
  ]);
  const [isHovering, setIsHovering] = useState(false);
  useEffect(() => {
    const container = document.querySelector('.chat-messages');
    if (container) {
      container.scrollTop = container.scrollHeight;
    }
  }, [messages]);
  const handleSendMessage = async () => {
    const question = inputValue.trim();
    if (!question) return;
  
    // 1) –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
    const userMsg = {
      id: Date.now(),
      text: question,
      timestamp: new Date().toLocaleTimeString(),
      isUser: true
    };
    setMessages(prev => [...prev, userMsg]);
    setHistory(prev  => [...prev, question]);
    setInputValue('');
  
    // 2) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
    setIsLoading(true);
  
    try {
      // 3) –®–ª—ë–º –Ω–∞ –±—ç–∫–µ–Ω–¥ –∏ –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞
      const { answer, source_documents } = await sendMessage(question, history);
  
      const botMsg = {
        id: Date.now() + 1,
        text: answer,
        timestamp: new Date().toLocaleTimeString(),
        isUser: false
      };
      setMessages(prev => [...prev, botMsg]);
    } catch (err) {
      console.error(err);
      // 4) –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
      const errMsg = {
        id: Date.now() + 2,
        text: '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
        timestamp: new Date().toLocaleTimeString(),
        isUser: false
      };
      setMessages(prev => [...prev, errMsg]);
    } finally {
      setIsLoading(false);
    }
  };
  
  const loadFromHistory = async (text) => {
    // —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º, —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    const userMsg = {
      id: Date.now(),
      text,
      timestamp: new Date().toLocaleTimeString(),
      isUser: true
    };
    setMessages(prev => [...prev, userMsg]);
    setIsLoading(true);
  
    try {
      const { answer } = await sendMessage(text, history);
      const botMsg = {
        id: Date.now() + 1,
        text: answer,
        timestamp: new Date().toLocaleTimeString(),
        isUser: false
      };
      setMessages(prev => [...prev, botMsg]);
    } catch (err) {
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="chat-page">
      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Äî –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ */}
      <div className="chat-history">
        <h3>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤</h3>
        <div className="history-list">
          {history.map((item, index) => (
            <div
              key={index}
              className="history-item"
              onClick={() => loadFromHistory(item)}
            >
              {item.length > 30 ? `${item.substring(0, 30)}...` : item}
            </div>
          ))}
        </div>
      </div>
  
      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Äî —Å–∞–º —á–∞—Ç */}
      <div className="chat-container">
      <div className="chat-tools">
  <button
    className="clear-btn"
    onClick={async () => {
      setMessages([]);
      try {
        await clearChat();
      } catch (err) {
        alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ' + err.message);
      }
    }}
  >
    üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç
  </button>

  <label htmlFor="upload-file" className="upload-btn">
    üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
    <input
  id="upload-file"
  type="file"
  style={{ display: 'none' }}
  onChange={async (e) => {
    const file = e.target.files[0];
    if (!file) return;
  
    try {
      const {
        message,
        auto_question,
        auto_answer,
      } = await uploadFile(file);
  
      const now = Date.now();
  
      const questionMsg = {
        id: now,
        text: auto_question,
        timestamp: new Date().toLocaleTimeString(),
        isUser: true,
      };
  
      const answerMsg = {
        id: now + 1,
        text: auto_answer,
        timestamp: new Date().toLocaleTimeString(),
        isUser: false,
      };
  
      setMessages((prev) => [...prev, questionMsg, answerMsg]);
      setHistory((prev) => [...prev, auto_question, auto_answer]);
    } catch (err) {
      const errorMsg = {
        id: Date.now(),
        text: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + err.message,
        timestamp: new Date().toLocaleTimeString(),
        isUser: false,
      };
      setMessages((prev) => [...prev, errorMsg]);
    }
  }}
  
/>
  </label>
</div>

        <div className="chat-messages">
          {messages.length === 0 ? (
            <div className="empty-chat">
              <h3>–ß–∞—Ç —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º</h3>
              <p>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤</p>
            </div>
          ) : (
            messages.map((message) => (
              <div
                key={message.id}
                className={`message ${message.isUser ? 'user' : 'bot'}`}
              >
                <div className="message-content">
                  {message.text}
                  <span className="message-time">{message.timestamp}</span>
                </div>
              </div>
            ))
          )}
  
          {/* –°–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {isLoading && (
            <div className="loading-spinner">
              <div className="spinner" />
            </div>
          )}
        </div>
  
        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ */}
        <div className="chat-input">
          <input
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
          />
          <button onClick={handleSendMessage}>
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M22 2L11 13"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
              <path
                d="M22 2L15 22L11 13L2 9L22 2Z"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
}  



const InternshipsPage = () => {
  const [selectedInternship, setSelectedInternship] = useState(null);
  const [coverLetter, setCoverLetter] = useState('');
  const [showResults, setShowResults] = useState(false);
  const [applications, setApplications] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);

  const internships = [
    {
      id: 1,
      title: "Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (React)",
      company: "TechCorp",
      logo: "üè¢",
      location: "–ú–æ—Å–∫–≤–∞ / –£–¥–∞–ª–µ–Ω–Ω–æ",
      description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –í—ã –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –æ–ø—ã—Ç–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
      skills: "JavaScript, React, Redux, HTML/CSS",
      spots: 3,
      salary: "–æ—Ç 70 000 ‚ÇΩ",
      duration: "3 –º–µ—Å—è—Ü–∞"
    },
    {
      id: 2,
      title: "Data Science —Å—Ç–∞–∂–µ—Ä",
      company: "DataPro",
      logo: "üìä",
      location: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
      description: "–ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ML-–º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á. –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –º–µ–Ω—Ç–æ—Ä–∞.",
      skills: "Python, Pandas, NumPy, SQL",
      spots: 2,
      salary: "–æ—Ç 90 000 ‚ÇΩ",
      duration: "6 –º–µ—Å—è—Ü–µ–≤"
    },
    {
      id: 3,
      title: "Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (Node.js)",
      company: "WebSolutions",
      logo: "üîß",
      location: "–£–¥–∞–ª–µ–Ω–Ω–æ",
      description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API –∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ª–æ–≥–∏–∫–∏ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ò–¥–µ–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É.",
      skills: "Node.js, Express, MongoDB, REST API",
      spots: 5,
      salary: "–æ—Ç 80 000 ‚ÇΩ",
      duration: "4 –º–µ—Å—è—Ü–∞"
    }
  ];

  const internshipResults = [
    { id: 1, status: "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è", feedback: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —á–µ—Ä–µ–∑ 1-2 –Ω–µ–¥–µ–ª–∏." },
    { id: 2, status: "–ü—Ä–∏–Ω—è—Ç–æ", feedback: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É. HR-–º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π." },
    { id: 3, status: "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", feedback: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–∏–µ –ø–æ–∑–∏—Ü–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–µ–º—É –æ–ø—ã—Ç—É." }
  ];

  const handleApply = (internship) => {
    setSelectedInternship(internship);
    setCoverLetter(`–Ø —Ö–æ—á—É –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É "${internship.title}" –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ${internship.company}, –ø–æ—Ç–æ–º—É —á—Ç–æ...`);
  };

  const generateCoverLetter = () => {
    setIsGenerating(true);
    setTimeout(() => {
      setCoverLetter(`–£–≤–∞–∂–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ ${selectedInternship.company}!

–ú–µ–Ω—è –∑–æ–≤—É—Ç [–í–∞—à–µ –∏–º—è], –∏ —è —Ö–æ—Ç–µ–ª –±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É "${selectedInternship.title}".

–ú–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ ${selectedInternship.skills.split(', ')[0]} –∏ –º–æ–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ ${selectedInternship.description.split('. ')[0].toLowerCase()} –¥–µ–ª–∞—é—Ç –º–µ–Ω—è –æ—Ç–ª–∏—á–Ω—ã–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –Ω–∞ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é.

–í–æ –≤—Ä–µ–º—è –º–æ–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è/—Ä–∞–±–æ—Ç—ã —è [–æ–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–ø—ã—Ç]. –Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–º–æ–≥—É –≤–Ω–µ—Å—Ç–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç.

–ë—É–¥—É —Ä–∞–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Å—É–¥–∏—Ç—å, –∫–∞–∫ –º–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
[–í–∞—à–µ –∏–º—è]
[–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]`);
      setIsGenerating(false);
    }, 1500);
  };

  const submitApplication = () => {
    const newApplication = {
      internshipId: selectedInternship.id,
      title: selectedInternship.title,
      company: selectedInternship.company,
      status: "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è",
      date: new Date().toLocaleDateString('ru-RU'),
      coverLetter: coverLetter
    };
    
    setApplications([...applications, newApplication]);
    alert(`–ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É "${selectedInternship.title}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`);
    setSelectedInternship(null);
    setCoverLetter('');
  };

  return (
    <div className="internships-page">
      <div className="internships-header">
        <h1>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏</h1>
        <button 
          className="results-btn"
          onClick={() => setShowResults(!showResults)}
        >
          {showResults ? "‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞–º" : "–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"}
        </button>
      </div>

      {showResults ? (
        <div className="results-section">
          <h2 className="section-title">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∏—Ö –∑–∞—è–≤–æ–∫</h2>
          {applications.length === 0 ? (
            <div className="empty-results">
              <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫</p>
              <button 
                className="primary-btn"
                onClick={() => setShowResults(false)}
              >
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
              </button>
            </div>
          ) : (
            <div className="results-list">
              {applications.map((app, index) => {
                const result = internshipResults.find(r => r.id === app.internshipId) || {};
                return (
                  <div key={index} className={`result-card ${result.status.toLowerCase()}`}>
                    <div className="result-header">
                      <h3>{app.title}</h3>
                      <span className="company">{app.company}</span>
                      <div className={`status-badge ${result.status.toLowerCase()}`}>
                        {result.status}
                      </div>
                    </div>
                    <div className="result-content">
                      <p className="feedback">{result.feedback}</p>
                      <p className="date">–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {app.date}</p>
                      <button 
                        className="details-btn"
                        onClick={() => {
                          setSelectedInternship(internships.find(i => i.id === app.internshipId));
                          setCoverLetter(app.coverLetter);
                        }}
                      >
                        –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      ) : (
        <div className="internships-container">
          <div className="internships-list">
            {internships.map(internship => (
              <div key={internship.id} className="internship-card">
                <div className="internship-header">
                  <div className="company-logo">{internship.logo}</div>
                  <div className="internship-info">
                    <h2>{internship.title}</h2>
                    <span className="company">{internship.company}</span>
                    <span className="location">{internship.location}</span>
                  </div>
                </div>
                
                <div className="internship-details">
                  <p className="description">{internship.description}</p>
                  
                  <div className="details-grid">
                    <div className="detail-item">
                      <span className="detail-label">–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏:</span>
                      <span className="detail-value">{internship.skills}</span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">–ó–∞—Ä–ø–ª–∞—Ç–∞:</span>
                      <span className="detail-value salary">{internship.salary}</span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                      <span className="detail-value">{internship.duration}</span>
                    </div>
                  </div>
                </div>
                
                <div className="internship-footer">
                  <div className="spots-available">
                    <span className="spots-label">–î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç:</span>
                    <span className="spots-count">{internship.spots}</span>
                  </div>
                  <button 
                    className="apply-btn"
                    onClick={() => handleApply(internship)}
                  >
                    –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {selectedInternship && (
        <div className="application-modal">
          <div className="modal-overlay" onClick={() => setSelectedInternship(null)}></div>
          <div className="modal-content">
            <button 
              className="close-modal"
              onClick={() => setSelectedInternship(null)}
            >
              &times;
            </button>
            
            <div className="modal-header">
              <h2>–ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É</h2>
              <div className="internship-title">{selectedInternship.title} –≤ {selectedInternship.company}</div>
            </div>
            
            <div className="application-form">
              <div className="form-section">
                <h3 className="section-title">–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ</h3>
                <p className="section-description">–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —ç—Ç—É —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –∏ —á–µ–º –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã</p>
                
                <div className="cover-letter-editor">
                  <textarea
                    value={coverLetter}
                    onChange={(e) => setCoverLetter(e.target.value)}
                    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∑–¥–µ—Å—å..."
                    className="letter-textarea"
                  />
                  <div className="editor-toolbar">
                    <button 
                      className={`generate-btn ${isGenerating ? 'generating' : ''}`}
                      onClick={generateCoverLetter}
                      disabled={isGenerating}
                    >
                      {isGenerating ? (
                        <>
                          <span className="spinner"></span>
                          –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...
                        </>
                      ) : (
                        <>
                          <span className="icon">‚ú®</span>
                          –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Å—å–º–æ
                        </>
                      )}
                    </button>
                    <div className="word-count">{coverLetter.length}/1000 —Å–∏–º–≤–æ–ª–æ–≤</div>
                  </div>
                </div>
              </div>
              
              <div className="form-actions">
                <button 
                  className="submit-btn"
                  onClick={submitApplication}
                  disabled={coverLetter.length < 50}
                >
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                </button>
                <button 
                  className="cancel-btn"
                  onClick={() => setSelectedInternship(null)}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const SchedulePage = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
  const [currentWeek, setCurrentWeek] = useState(new Date());
  const [schedule, setSchedule] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - API –∑–∞–ø—Ä–æ—Å)
  useEffect(() => {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
      setSchedule(generateMockSchedule());
      setIsLoading(false);
    }, 800);
  }, [currentWeek]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const generateMockSchedule = () => {
    const days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    const eventTypes = ['–õ–µ–∫—Ü–∏—è', '–ü—Ä–∞–∫—Ç–∏–∫–∞', '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞'];
    const courses = ['React Advanced', 'Node.js Basics', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'];
    
    return days.map(day => {
      const eventsCount = Math.floor(Math.random() * 3) + 1; // 1-3 —Å–æ–±—ã—Ç–∏—è –≤ –¥–µ–Ω—å
      const dayEvents = [];
      
      for (let i = 0; i < eventsCount; i++) {
        const hour = 9 + Math.floor(Math.random() * 8); // –° 9 –¥–æ 17
        const minutes = Math.random() > 0.5 ? 0 : 30;
        const duration = [60, 90, 120][Math.floor(Math.random() * 3)]; // 1, 1.5 –∏–ª–∏ 2 —á–∞—Å–∞
        
        dayEvents.push({
          id: `${day}-${i}`,
          title: courses[Math.floor(Math.random() * courses.length)],
          type: eventTypes[Math.floor(Math.random() * eventTypes.length)],
          time: `${hour}:${minutes === 0 ? '00' : minutes}`,
          duration,
          location: ['Zoom', '–ê—É–¥–∏—Ç–æ—Ä–∏—è 304', '–ê—É–¥–∏—Ç–æ—Ä–∏—è 412', '–û–Ω–ª–∞–π–Ω'][Math.floor(Math.random() * 4)],
          instructor: ['–ò–≤–∞–Ω–æ–≤ –ê.–ê.', '–ü–µ—Ç—Ä–æ–≤–∞ –°.–ò.', '–°–∏–¥–æ—Ä–æ–≤ –í.–í.'][Math.floor(Math.random() * 3)],
          isCompleted: Math.random() > 0.7,
          isImportant: Math.random() > 0.8
        });
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      dayEvents.sort((a, b) => a.time.localeCompare(b.time));
      
      return {
        dayName: day,
        date: new Date(), // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –¥–∞—Ç–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        events: dayEvents
      };
    });
  };

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
  const prevWeek = () => {
    setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate() - 7)));
    setIsLoading(true);
  };

  const nextWeek = () => {
    setCurrentWeek(new Date(currentWeek.setDate(currentWeek.getDate() + 7)));
    setIsLoading(true);
  };

  const goToToday = () => {
    setCurrentWeek(new Date());
    setIsLoading(true);
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDateRange = (date) => {
    const start = new Date(date);
    start.setDate(start.getDate() - start.getDay() + 1); // –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    
    const end = new Date(start);
    end.setDate(start.getDate() + 5); // –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ (–ø—è—Ç–Ω–∏—Ü–∞)
    
    return `${start.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' })} - ${end.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' })}`;
  };

  return (
    <div className="schedule-page">
      <div className="schedule-header">
        <h1>–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h1>
        <div className="week-navigation">
          <button onClick={prevWeek} className="nav-button">
            &lt; –ü—Ä–µ–¥—ã–¥—É—â–∞—è
          </button>
          <div className="current-week">
            {formatDateRange(currentWeek)}
            <button onClick={goToToday} className="today-button">
              –°–µ–≥–æ–¥–Ω—è
            </button>
          </div>
          <button onClick={nextWeek} className="nav-button">
            –°–ª–µ–¥—É—é—â–∞—è &gt;
          </button>
        </div>
      </div>

      {isLoading ? (
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...</p>
        </div>
      ) : (
        <div className="schedule-grid">
          {schedule.map((daySchedule) => (
            <div key={daySchedule.dayName} className="day-column">
              <div className="day-header">
                <h3>{daySchedule.dayName}</h3>
                <span className="day-date">
                  {daySchedule.date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' })}
                </span>
              </div>
              
              <div className="events-list">
                {daySchedule.events.length > 0 ? (
                  daySchedule.events.map((event) => (
                    <div 
                      key={event.id} 
                      className={`event-card ${event.isCompleted ? 'completed' : ''} ${event.isImportant ? 'important' : ''}`}
                    >
                      <div className="event-time">
                        {event.time} - {calculateEndTime(event.time, event.duration)}
                      </div>
                      <h4 className="event-title">{event.title}</h4>
                      <div className="event-details">
                        <span className={`event-type ${event.type.toLowerCase()}`}>
                          {event.type}
                        </span>
                        <span className="event-location">
                          {event.location}
                        </span>
                      </div>
                      <div className="event-instructor">
                        –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {event.instructor}
                      </div>
                      {event.isImportant && (
                        <div className="important-badge">–í–∞–∂–Ω–æ!</div>
                      )}
                    </div>
                  ))
                ) : (
                  <div className="no-events">
                    –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

const calculateEndTime = (startTime, duration) => {
  const [hours, minutes] = startTime.split(':').map(Number);
  const totalMinutes = hours * 60 + minutes + duration;
  const endHours = Math.floor(totalMinutes / 60);
  const endMinutes = totalMinutes % 60;
  return `${endHours}:${endMinutes < 10 ? '0' + endMinutes : endMinutes}`;
};

const EventsPage = () => {
  const [activeTab, setActiveTab] = useState('upcoming');
  const [registeredEvents, setRegisteredEvents] = useState([]);
  const [expandedEvent, setExpandedEvent] = useState(null);

  const eventsData = [
    {
      id: 1,
      title: "–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–ª—É–±–æ–≤",
      date: new Date(),
      time: "10:00-16:00",
      location: "–ì–ª–∞–≤–Ω—ã–π —Ö–æ–ª–ª",
      description: "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å–æ –≤—Å–µ–º–∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º–∏ –∫–ª—É–±–∞–º–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. IT-–∫–ª—É–±, –î–µ–±–∞—Ç—ã, –§–æ—Ç–æ–∫–ª—É–± –∏ –¥—Ä—É–≥–∏–µ.",
      type: "club",
      emoji: "üé≠",
      seats: { total: 150, booked: 112 },
      deadline: "–¥–æ 18:00",
      color: "#6366F1"
    },
    {
      id: 2,
      title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–µ—Å—Å–∏—é",
      date: new Date(Date.now() + 86400000),
      time: "09:00-17:00",
      location: "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
      description: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ª–µ—Ç–Ω—é—é —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤.",
      type: "exam",
      emoji: "üìö",
      seats: { total: 500, booked: 327 },
      deadline: "–¥–æ 23:59",
      color: "#EC4899"
    },
    {
      id: 3,
      title: "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å IELTS 9.0",
      date: new Date(Date.now() + 172800000),
      time: "15:00-17:30",
      location: "–ö–æ–≤–æ—Ä–∫–∏–Ω–≥ ‚Ññ3",
      description: "–†–∞–∑–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å–¥–∞—á–∏ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞, –ø–æ–ª—É—á–∏–≤—à–µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª. –í–∫–ª—é—á–∞–µ—Ç Q&A —Å–µ—Å—Å–∏—é.",
      type: "masterclass",
      emoji: "üéØ",
      seats: { total: 30, booked: 28 },
      deadline: "–¥–æ 12:00",
      color: "#F59E0B"
    },
    {
      id: 4,
      title: "–•–∞–∫–∞—Ç–æ–Ω '–ö–æ–¥ –±—É–¥—É—â–µ–≥–æ'",
      date: new Date("2023-05-21"),
      time: "10:00-22:00",
      location: "IT-—Ü–µ–Ω—Ç—Ä",
      description: "24-—á–∞—Å–æ–≤–æ–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ IT-—Ä–µ—à–µ–Ω–∏–π. –ü—Ä–∏–∑—ã –æ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.",
      type: "hackathon",
      emoji: "üíª",
      seats: { total: 50, booked: 49 },
      deadline: "–¥–æ 20:00 20 –º–∞—è",
      color: "#10B981"
    }
  ];

  const handleRegister = (id) => {
    setRegisteredEvents([...registeredEvents, id]);
    setExpandedEvent(null);
  };

  const handleExpand = (id) => {
    setExpandedEvent(expandedEvent === id ? null : id);
  };

  const upcomingEvents = eventsData.filter(e => !registeredEvents.includes(e.id));
  const myEvents = eventsData.filter(e => registeredEvents.includes(e.id));

  return (
    <div className="events-container-2">
      <header className="events-header-2">
        <motion.h1 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π
        </motion.h1>
        
        <div className="tabs-2">
          {['upcoming', 'my'].map(tab => (
            <button
              key={tab}
              className={`tab-2 ${activeTab === tab ? 'active-2' : ''}`}
              onClick={() => setActiveTab(tab)}
            >
              {tab === 'upcoming' ? '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ' : '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è'}
              {tab === 'my' && myEvents.length > 0 && (
                <span className="badge-2">{myEvents.length}</span>
              )}
            </button>
          ))}
        </div>
      </header>

      <div className="events-grid-2">

      {(activeTab === 'upcoming' ? upcomingEvents : myEvents).map(event => (
          <div 
            key={event.id}
            className={`event-card-2 ${expandedEvent === event.id ? 'expanded-2' : ''}`}
            style={{ borderLeft: `4px solid ${event.color}` }}
          > <div className="event-header-2" onClick={() => handleExpand(event.id)}>
          <div className="event-emoji-2">{event.emoji}</div>
          <div className="event-main-2">
            <h3>{event.title}</h3>
            <div className="event-meta-2">
              <span>{event.date.toLocaleDateString('ru-RU', { weekday: 'short', day: 'numeric', month: 'short' })}</span>
              <span>{event.time}</span>
              <span>{event.location}</span>
            </div>
          </div>
          <div className={`event-status-2 ${event.seats.booked >= event.seats.total ? 'full-2' : ''}`}>
            {event.seats.booked >= event.seats.total ? '–ú–µ—Å—Ç –Ω–µ—Ç' : `${event.seats.total - event.seats.booked} –º–µ—Å—Ç`}
          </div>
        </div>
     <AnimatePresence>
              {expandedEvent === event.id && (
                <motion.div
                  className="event-details-2"
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  transition={{ duration: 0.2 }}
                >
                  <p>{event.description}</p>
                  <div className="event-footer-2">
                    <span className="deadline-2">‚è≥ {event.deadline}</span>
                    {activeTab === 'upcoming' && (
                      <button
                        className={`register-btn-2 ${event.seats.booked >= event.seats.total ? 'disabled-2' : ''}`}
                        onClick={(e) => {
                          e.stopPropagation();
                          handleRegister(event.id);
                        }}
                        disabled={event.seats.booked >= event.seats.total}
                      >
                        {registeredEvents.includes(event.id) ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' : '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è'}
                      </button>
                    )}
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        ))}
      </div>
    </div>
  );
};


const AuthPage = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  const predefinedUsers = [
    { 
      email: 'student@edu.ru', 
      password: 'student123', 
      role: 'student',
      name: '–°–º–∏—Ä–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π',
      faculty: '–§–∞–∫—É–ª—å—Ç–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫',
      course: '3 –∫—É—Ä—Å',
      gpa: '4.7'
    },
    { 
      email: 'teacher@edu.ru', 
      password: 'teacher123', 
      role: 'teacher',
      name: '–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞',
      department: '–ö–∞—Ñ–µ–¥—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏',
      position: '–î–æ—Ü–µ–Ω—Ç'
    },
    { 
      email: 'admin@edu.ru', 
      password: 'admin123', 
      role: 'admin',
      name: '–ö–æ–∑–ª–æ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á',
      position: '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    },
    { 
      email: 'applicant@edu.ru', 
      password: 'applicant123', 
      role: 'applicant',
      name: '–ù–æ–≤–∏–∫–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
      status: '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'
    }
  ];


   const handleSubmit = (e) => {
    e.preventDefault();
    setError('');

    if (isLogin) {
      const user = predefinedUsers.find(
        user => user.email === email && user.password === password
      );

      if (user) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        localStorage.setItem('user', JSON.stringify(user));
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–æ–ª–∏
        navigate(`/profile?role=${user.role}`);
      } else {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
      }
    } else {
      // –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
      if (predefinedUsers.some(user => user.email === email)) {
        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        setError('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
    }
  };


  const toggleAuthMode = () => {
    setIsLogin(!isLogin);
    setError('');
  };

  return (
    <motion.div 
      className="auth-container"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <div className="auth-card">
        <div className="auth-header">
          <h2>{isLogin ? '–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h2>
          <div className="auth-switch">
            {isLogin ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?' : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?'}
            <button onClick={toggleAuthMode}>
              {isLogin ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏'}
            </button>
          </div>
        </div>

        <form onSubmit={handleSubmit}>
          {!isLogin && (
            <div className="form-group">
              <label>–§–ò–û</label>
              <input
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                required
              />
            </div>
          )}

          <div className="form-group">
            <label>Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="example@edu.ru"
              required
            />
          </div>

          <div className="form-group">
            <label>–ü–∞—Ä–æ–ª—å</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              required
              minLength="6"
            />
          </div>

          {error && <div className="error-message">{error}</div>}

          <button type="submit" className="submit-button">
            {isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </button>
        </form>

        
      </div>
    </motion.div>
  );
};



<Route path="/auth" element={<AuthPage />} />



const ProfilePage = () => {
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const roleFromURL = searchParams.get('role');
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
  const storedUser = JSON.parse(localStorage.getItem('user'));
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ URL, –ø–æ—Ç–æ–º –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const role = roleFromURL || storedUser?.role || 'student';
  
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
  const roleProfiles = {
    student: {
      name: storedUser?.name || '–°–º–∏—Ä–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π',
      email: storedUser?.email || 'smirnov@university.edu',
      faculty: storedUser?.faculty || '–§–∞–∫—É–ª—å—Ç–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫',
      course: storedUser?.course || '3 –∫—É—Ä—Å',
      gpa: storedUser?.gpa || '4.7',
      skills: ['JavaScript', 'React', 'Python', 'SQL'],
      bio: '–£–≤–ª–µ–∫–∞—é—Å—å –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö. –ò—â—É —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –≤ IT-–∫–æ–º–ø–∞–Ω–∏–∏.',
      avatar: null,
      resume: null
    },
    teacher: {
      name: storedUser?.name || '–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞',
      email: storedUser?.email || 'petrova@university.edu',
      department: storedUser?.department || '–ö–∞—Ñ–µ–¥—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏',
      position: storedUser?.position || '–î–æ—Ü–µ–Ω—Ç',
      degree: '–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫',
      courses: ['–í–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'],
      bio: '–ü—Ä–µ–ø–æ–¥–∞—é —Å 2015 –≥–æ–¥–∞. –ù–∞—É—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ.',
      avatar: null
    },
    admin: {
      name: storedUser?.name || '–ö–æ–∑–ª–æ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á',
      email: storedUser?.email || 'admin@university.edu',
      position: storedUser?.position || '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      accessLevel: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø',
      lastLogin: new Date().toLocaleString(),
      bio: '–û—Ç–≤–µ—á–∞—é –∑–∞ —Ä–∞–±–æ—Ç—É –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞ –∏ —Å–º–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.',
      avatar: null
    },
    applicant: {
      name: storedUser?.name || '–ù–æ–≤–∏–∫–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞',
      email: storedUser?.email || 'novikova@gmail.com',
      status: storedUser?.status || '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
      appliedFaculty: '–§–∞–∫—É–ª—å—Ç–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
      examResults: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: 92, –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: 88, –†—É—Å—Å–∫–∏–π —è–∑—ã–∫: 85',
      motivationLetter: '–ú–µ—á—Ç–∞—é —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—ã.',
      documents: null,
      avatar: null
    }
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
  const [user, setUser] = useState(roleProfiles[role]);
  const [editMode, setEditMode] = useState(false);
  const fileInputRef = useRef(null);
  const avatarInputRef = useRef(null);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUser(prev => ({ ...prev, [name]: value }));
  };

  const handleAvatarUpload = (e) => {
    const file = e.target.files[0];
    if (file?.type.match('image.*')) {
      const reader = new FileReader();
      reader.onload = (event) => {
        setUser(prev => ({ ...prev, avatar: event.target.result }));
      };
      reader.readAsDataURL(file);
    }
  };

  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file?.type === 'application/pdf') {
      if (role === 'student') {
        setUser(prev => ({ ...prev, resume: file }));
      } else {
        setUser(prev => ({ ...prev, documents: file }));
      }
    } else {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª');
    }
  };

  // –†–µ–Ω–¥–µ—Ä —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
  const renderRoleFields = () => {
    switch (role) {
      case 'student':
        return (
          <>
            <div className="info-item">
              <label>–§–∞–∫—É–ª—å—Ç–µ—Ç</label>
              {editMode ? (
                <input
                  type="text"
                  name="faculty"
                  value={user.faculty}
                  onChange={handleInputChange}
                />
              ) : (
                <p>{user.faculty}</p>
              )}
            </div>
            <div className="info-item">
              <label>–ö—É—Ä—Å</label>
              {editMode ? (
                <select
                  name="course"
                  value={user.course}
                  onChange={handleInputChange}
                >
                  {[1, 2, 3, 4].map(n => <option key={n} value={`${n} –∫—É—Ä—Å`}>{n} –∫—É—Ä—Å</option>)}
                </select>
              ) : (
                <p>{user.course}</p>
              )}
            </div>
            <div className="info-item">
              <label>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</label>
              {editMode ? (
                <input
                  type="text"
                  name="gpa"
                  value={user.gpa}
                  onChange={handleInputChange}
                />
              ) : (
                <p>{user.gpa}</p>
              )}
            </div>
          </>
        );

      case 'teacher':
        return (
          <>
            <div className="info-item">
              <label>–ö–∞—Ñ–µ–¥—Ä–∞</label>
              {editMode ? (
                <input
                  type="text"
                  name="department"
                  value={user.department}
                  onChange={handleInputChange}
                />
              ) : (
                <p>{user.department}</p>
              )}
            </div>
            <div className="info-item">
              <label>–î–æ–ª–∂–Ω–æ—Å—Ç—å</label>
              <p>{user.position}</p>
            </div>
            <div className="info-item">
              <label>–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å</label>
              <p>{user.degree}</p>
            </div>
          </>
        );

      case 'admin':
        return (
          <>
            <div className="info-item">
              <label>–î–æ–ª–∂–Ω–æ—Å—Ç—å</label>
              <p>{user.position}</p>
            </div>
            <div className="info-item">
              <label>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞</label>
              <p>{user.accessLevel}</p>
            </div>
            <div className="info-item">
              <label>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥</label>
              <p>{user.lastLogin}</p>
            </div>
          </>
        );

      case 'applicant':
        return (
          <>
            <div className="info-item">
              <label>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏</label>
              <p className={`status-${user.status.replace(' ', '')}`}>{user.status}</p>
            </div>
            <div className="info-item">
              <label>–§–∞–∫—É–ª—å—Ç–µ—Ç</label>
              <p>{user.appliedFaculty}</p>
            </div>
            <div className="info-item">
              <label>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ï–ì–≠</label>
              <p>{user.examResults}</p>
            </div>
          </>
        );

      default:
        return null;
    }
  };

  return (
    <motion.div
      className={`profile-container ${role}`}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <div className="profile-header">
        <h1>
          {role === 'student' && '–ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞'}
          {role === 'teacher' && '–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'}
          {role === 'admin' && '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å'}
          {role === 'applicant' && '–ú–æ—è –∑–∞—è–≤–∫–∞'}
        </h1>
        
        {role !== 'admin' && (
          <button
            className={`edit-button ${editMode ? 'save-button' : ''}`}
            onClick={() => setEditMode(!editMode)}
          >
            {editMode ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
          </button>
        )}
      </div>

      <div className="profile-content">
        <div className="profile-main">
          <div className="avatar-section">
            <div
              className="avatar-wrapper"
              onClick={() => editMode && avatarInputRef.current?.click()}
            >
              {user.avatar ? (
                <img src={user.avatar} alt="–ê–≤–∞—Ç–∞—Ä" className="avatar" />
              ) : (
                <div className="avatar-placeholder">
                  {user.name.split(' ').map(n => n[0]).join('')}
                </div>
              )}
              {editMode && (
                <>
                  <input
                    type="file"
                    ref={avatarInputRef}
                    onChange={handleAvatarUpload}
                    accept="image/*"
                    style={{ display: 'none' }}
                  />
                  <div className="avatar-overlay">–ò–∑–º–µ–Ω–∏—Ç—å</div>
                </>
              )}
            </div>
            <h2>{user.name}</h2>
            <p className="role-badge">
              {role === 'student' && '–°—Ç—É–¥–µ–Ω—Ç'}
              {role === 'teacher' && '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'}
              {role === 'admin' && '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}
              {role === 'applicant' && '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç'}
            </p>
          </div>

          <div className="info-section">
            <div className="personal-info">
              <h2>{role === 'applicant' ? '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ' : '–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}</h2>
              <div className="info-grid">
                <div className="info-item">
                  <label>Email</label>
                  {editMode ? (
                    <input
                      type="email"
                      name="email"
                      value={user.email}
                      onChange={handleInputChange}
                    />
                  ) : (
                    <p>{user.email}</p>
                  )}
                </div>

                {renderRoleFields()}
              </div>
            </div>

            <div className="bio-section">
              <h2>{role === 'applicant' ? '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ' : '–û —Å–µ–±–µ'}</h2>
              {editMode ? (
                <textarea
                  name="bio"
                  value={user.bio || user.motivationLetter}
                  onChange={handleInputChange}
                  className="bio-textarea"
                />
              ) : (
                <p className="bio-text">{user.bio || user.motivationLetter}</p>
              )}
            </div>
          </div>
        </div>

        {/* –°–µ–∫—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤ (—Å—Ç—É–¥–µ–Ω—Ç) */}
        {role === 'student' && (
          <div className="skills-section">
            <h2>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏</h2>
            <div className="skills-tags">
              {user.skills.map((skill, index) => (
                <span key={index} className="skill-tag">{skill}</span>
              ))}
              {editMode && (
                <button className="add-skill-button">+ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫</button>
              )}
            </div>
          </div>
        )}

        {/* –°–µ–∫—Ü–∏—è –∫—É—Ä—Å–æ–≤ (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å) */}
        {role === 'teacher' && (
          <div className="courses-section">
            <h2>–ü—Ä–µ–ø–æ–¥–∞–≤–∞–µ–º—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã</h2>
            <ul className="courses-list">
              {user.courses.map((course, index) => (
                <li key={index}>
                  {course}
                  {editMode && <button className="remove-course">√ó</button>}
                </li>
              ))}
              {editMode && (
                <button className="add-course-button">+ –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å</button>
              )}
            </ul>
          </div>
        )}

        {/* –°–µ–∫—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
        {(role === 'student' || role === 'applicant') && (
          <div className="documents-section">
            <h2>{role === 'student' ? '–†–µ–∑—é–º–µ' : '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'}</h2>
            <div className="document-upload">
              {(role === 'student' ? user.resume : user.documents) ? (
                <div className="document-preview">
                  <span className="document-icon">üìÑ</span>
                  <div className="document-details">
                    <span className="document-name">
                      {(role === 'student' ? user.resume : user.documents)?.name}
                    </span>
                    <span className="document-size">
                      {((role === 'student' ? user.resume : user.documents)?.size / 1024).toFixed(1)} KB
                    </span>
                  </div>
                  <div className="document-actions">
                    <a
                      href={URL.createObjectURL(role === 'student' ? user.resume : user.documents)}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="view-button"
                    >
                      –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </a>
                    <button
                      onClick={() => role === 'student' 
                        ? setUser(p => ({ ...p, resume: null })) 
                        : setUser(p => ({ ...p, documents: null }))
                      }
                      className="remove-button"
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              ) : (
                <motion.div
                  className="upload-area"
                  onClick={() => fileInputRef.current?.click()}
                  whileHover={{ scale: 1.02 }}
                >
                  <input
                    type="file"
                    ref={fileInputRef}
                    onChange={handleFileUpload}
                    accept=".pdf"
                    style={{ display: 'none' }}
                  />
                  <span className="upload-icon">üì§</span>
                  <p>
                    {role === 'student' 
                      ? '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ' 
                      : '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è'}
                  </p>
                  <span className="file-requirements">PDF, –Ω–µ –±–æ–ª–µ–µ 5MB</span>
                </motion.div>
              )}
            </div>
          </div>
        )}
      </div>
    </motion.div>
  );
};

















const AnalyticsPage = () => {
  const navigate = useNavigate();
  const [students, setStudents] = useState([]);
  const [filteredStudents, setFilteredStudents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    course: '',
    faculty: '',
    gpaMin: '',
    gpaMax: ''
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const user = JSON.parse(localStorage.getItem('user'));
    if (user?.role !== 'teacher') {
      navigate('/profile');
    }
  }, [navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - API –∑–∞–ø—Ä–æ—Å)
  useEffect(() => {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
      const mockStudents = [
        { id: 1, name: '–ò–≤–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π', faculty: '–§–ö–ù', course: 3, gpa: 4.8, skills: ['JS', 'React'], status: '–∞–∫—Ç–∏–≤–Ω—ã–π' },
        { id: 2, name: '–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è', faculty: '–§–ö–ù', course: 2, gpa: 4.5, skills: ['Python', 'Django'], status: '–∞–∫—Ç–∏–≤–Ω—ã–π' },
        { id: 3, name: '–°–∏–¥–æ—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π', faculty: '–§–≠–ù', course: 4, gpa: 3.9, skills: ['Java', 'Spring'], status: '–∞–∫—Ç–∏–≤–Ω—ã–π' },
        { id: 4, name: '–ö–æ–∑–ª–æ–≤–∞ –ê–Ω–Ω–∞', faculty: '–§–ö–ù', course: 3, gpa: 4.2, skills: ['C++', 'Algorithms'], status: '–∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –æ—Ç–ø—É—Å–∫' },
        { id: 5, name: '–ú–∏—Ö–∞–π–ª–æ–≤ –ò–≤–∞–Ω', faculty: '–§–≠–ù', course: 2, gpa: 3.7, skills: ['PHP', 'Laravel'], status: '–∞–∫—Ç–∏–≤–Ω—ã–π' },
      ];
      setStudents(mockStudents);
      setFilteredStudents(mockStudents);
      setLoading(false);
    }, 800);
  }, []);

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    let result = [...students];
    
    if (filters.course) {
      result = result.filter(s => s.course === parseInt(filters.course));
    }
    
    if (filters.faculty) {
      result = result.filter(s => s.faculty.toLowerCase().includes(filters.faculty.toLowerCase()));
    }
    
    if (filters.gpaMin) {
      result = result.filter(s => s.gpa >= parseFloat(filters.gpaMin));
    }
    
    if (filters.gpaMax) {
      result = result.filter(s => s.gpa <= parseFloat(filters.gpaMax));
    }
    
    setFilteredStudents(result);
  }, [filters, students]);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters(prev => ({ ...prev, [name]: value }));
  };

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
  const chartData = [
    { name: '–§–ö–ù', '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª': 4.3, '–ö–æ–ª-–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤': 12 },
    { name: '–§–≠–ù', '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª': 3.9, '–ö–æ–ª-–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤': 8 },
    { name: '–§–ì–ù', '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª': 4.1, '–ö–æ–ª-–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤': 5 },
  ];

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;
  }

  return (
    <div className="analytics-page">
      <header className="analytics-header">
        <h1>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h1>
        <button 
          className="back-button"
          onClick={() => navigate('/profile')}
        >
          –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é
        </button>
      </header>

      <div className="analytics-content">
        <section className="filters-section">
          <h2>–§–∏–ª—å—Ç—Ä—ã</h2>
          <div className="filter-grid">
            <div className="filter-item">
              <label>–ö—É—Ä—Å</label>
              <select name="course" value={filters.course} onChange={handleFilterChange}>
                <option value="">–í—Å–µ –∫—É—Ä—Å—ã</option>
                <option value="1">1 –∫—É—Ä—Å</option>
                <option value="2">2 –∫—É—Ä—Å</option>
                <option value="3">3 –∫—É—Ä—Å</option>
                <option value="4">4 –∫—É—Ä—Å</option>
              </select>
            </div>
            
            <div className="filter-item">
              <label>–§–∞–∫—É–ª—å—Ç–µ—Ç</label>
              <input 
                type="text" 
                name="faculty" 
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
                value={filters.faculty}
                onChange={handleFilterChange}
              />
            </div>
            
            <div className="filter-item">
              <label>GPA –æ—Ç</label>
              <input 
                type="number" 
                name="gpaMin" 
                min="0" 
                max="5" 
                step="0.1"
                placeholder="3.0"
                value={filters.gpaMin}
                onChange={handleFilterChange}
              />
            </div>
            
            <div className="filter-item">
              <label>GPA –¥–æ</label>
              <input 
                type="number" 
                name="gpaMax" 
                min="0" 
                max="5" 
                step="0.1"
                placeholder="5.0"
                value={filters.gpaMax}
                onChange={handleFilterChange}
              />
            </div>
          </div>
        </section>

        <section className="stats-section">
          <div className="stat-card">
            <h3>–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h3>
            <p>{students.length}</p>
          </div>
          <div className="stat-card">
            <h3>–°—Ä–µ–¥–Ω–∏–π GPA</h3>
            <p>{(students.reduce((sum, s) => sum + s.gpa, 0) / students.length).toFixed(2)}</p>
          </div>
          <div className="stat-card">
            <h3>–ê–∫—Ç–∏–≤–Ω—ã—Ö</h3>
            <p>{students.filter(s => s.status === '–∞–∫—Ç–∏–≤–Ω—ã–π').length}</p>
          </div>
        </section>

        <section className="charts-section">
          <div className="chart-container">
            <h3>–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º</h3>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª" fill="#4f46e5" />
                <Bar dataKey="–ö–æ–ª-–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤" fill="#10b981" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </section>

        <section className="students-table-section">
          <h2>–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ({filteredStudents.length})</h2>
          <div className="table-container">
            <table>
              <thead>
                <tr>
                  <th>–§–ò–û</th>
                  <th>–§–∞–∫—É–ª—å—Ç–µ—Ç</th>
                  <th>–ö—É—Ä—Å</th>
                  <th>GPA</th>
                  <th>–ù–∞–≤—ã–∫–∏</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                </tr>
              </thead>
              <tbody>
                {filteredStudents.map(student => (
                  <tr key={student.id}>
                    <td>{student.name}</td>
                    <td>{student.faculty}</td>
                    <td>{student.course}</td>
                    <td className={student.gpa >= 4.5 ? 'high-gpa' : student.gpa < 3.5 ? 'low-gpa' : ''}>
                      {student.gpa}
                    </td>
                    <td>{student.skills.join(', ')}</td>
                    <td className={`status-${student.status.replace(' ', '-')}`}>
                      {student.status}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </section>
      </div>
    </div>
  );
};


function PlagiarismCheckPage() {
  // –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç
  const worksDatabase = [
    {
      id: 1,
      title: "–ê–Ω–∞–ª–∏–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏",
      author: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
      date: "2023-10-15",
      content: "–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —è–≤–ª—è—é—Ç—Å—è –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
    },
    {
      id: 2,
      title: "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ React –∏ Vue",
      author: "–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è",
      date: "2023-11-02",
      content: "React –∏ Vue - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏. Vue –ø—Ä–æ—â–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤, –∞ React –∏–º–µ–µ—Ç –±–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π."
    },
    {
      id: 3,
      title: "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
      author: "–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π",
      date: "2023-09-10",
      content: "–ù–µ–π—Ä–æ—Å–µ—Ç–∏ revolution–∏–∑–∏—Ä—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö. –°–≤–µ—Ä—Ç–æ—á–Ω—ã–µ —Å–µ—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã –¥–ª—è image recognition."
    }
  ];

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
  const generateHash = (text) => {
    const normalizedText = text
      .toLowerCase()
      .replace(/[^\w\s–∞-—è—ë]/gi, '')
      .replace(/\s+/g, ' '); 


    const words = normalizedText.split(' ');
    const shingles = [];
    
    for (let i = 0; i <= words.length - 3; i++) {
      shingles.push(words.slice(i, i + 3).join(' '));
    }

    return shingles.join('|');
  };


  const calculateSimilarity = (hash1, hash2) => {
    if (!hash1 || !hash2) return 0;
    
    const shingles1 = hash1.split('|');
    const shingles2 = hash2.split('|');
    
    const intersection = shingles1.filter(shingle => 
      shingles2.includes(shingle)
    ).length;
    
    const union = shingles1.length + shingles2.length - intersection;
    
    return Math.round((intersection / union) * 100);
  };

  // –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ä–∞–±–æ—Ç
  const checkAgainstDatabase = (text) => {
    const textHash = generateHash(text);
    const results = [];

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–±–æ—Ç –≤ –±–∞–∑–µ
    const dbWithHashes = worksDatabase.map(work => ({
      ...work,
      hash: generateHash(work.content)
    }));

    dbWithHashes.forEach(item => {
      const similarity = calculateSimilarity(textHash, item.hash);
      if (similarity > 30) { // –ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è 30%
        results.push({
          ...item,
          similarity: similarity
        });
      }
    });

    return results.sort((a, b) => b.similarity - a.similarity);
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [file, setFile] = useState(null);
  const [results, setResults] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const fileInputRef = useRef(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const handleFileUpload = (e) => {
    const uploadedFile = e.target.files[0];
    if (!uploadedFile) return;

    setFile(uploadedFile);
    setIsLoading(true);

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const text = e.target.result;
        const plagiarismResults = checkAgainstDatabase(text);
        
        setResults({
          totalSimilarity: plagiarismResults[0]?.similarity || 0,
          details: plagiarismResults,
          originalText: text
        });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:", error);
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞");
      } finally {
        setIsLoading(false);
      }
    };
    
    // –ß—Ç–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç (–¥–ª—è TXT)
    if (uploadedFile.type === 'text/plain') {
      reader.readAsText(uploadedFile);
    } else {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)");
      setIsLoading(false);
    }
  };

  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–µ
  const highlightMatches = (text, matches) => {
    if (!matches || matches.length === 0) return text;
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const sentences = text.split(/[.!?]+/);
    return sentences.map((sentence, i) => {
      const sentenceHash = generateHash(sentence);
      const isMatch = matches.some(work => 
        calculateSimilarity(sentenceHash, generateHash(work.content)) > 50
      );
      
      return isMatch ? (
        <mark key={i}>{sentence}.</mark>
      ) : (
        <span key={i}>{sentence}.</span>
      );
    });
  };

  return (
    <div className="plagiarism-page">
      <h1>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–∞–≥–∏–∞—Ç</h1>
      <p className="description">
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –±–∞–∑–æ–π —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç
      </p>

      <div 
        className={`upload-area ${file ? 'has-file' : ''}`} 
        onClick={() => fileInputRef.current.click()}
      >
        <input 
          type="file" 
          ref={fileInputRef}
          onChange={handleFileUpload}
          accept=".txt"
          style={{ display: 'none' }}
        />
        
        {file ? (
          <>
            <p>{file.name}</p>
            <span className="file-size">
              {(file.size / 1024).toFixed(1)} KB
            </span>
          </>
        ) : (
          <>
            <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</p>
            <span>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt</span>
          </>
        )}
      </div>

      {isLoading && (
        <div className="loading">
          <div className="spinner"></div>
          <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...</p>
        </div>
      )}

      {results && (
        <div className="results">
          <div className={`summary ${results.totalSimilarity > 50 ? 'warning' : 'safe'}`}>
            <h2>
              {results.totalSimilarity > 50 ? (
                <>‚ö†Ô∏è –í–æ–∑–º–æ–∂–µ–Ω –ø–ª–∞–≥–∏–∞—Ç!</>
              ) : (
                <>‚úì –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–π</>
              )}
            </h2>
            <div className="similarity-bar">
              <div 
                className="bar-fill"
                style={{ width: `${results.totalSimilarity}%` }}
              ></div>
              <span>{results.totalSimilarity}%</span>
            </div>
            <p>
              {results.totalSimilarity > 70 ? 
                '–°–µ—Ä—å–µ–∑–Ω—ã–µ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.' :
                results.totalSimilarity > 30 ?
                '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.' :
                '–†–∞–±–æ—Ç–∞ –ø–æ–∫–∞–∑–∞–ª–∞ —Ö–æ—Ä–æ—à—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å.'}
            </p>
          </div>

          {results.details.length > 0 && (
            <>
              <h3>–ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:</h3>
              <ul className="matches-list">
                {results.details.map((work, index) => (
                  <li key={index}>
                    <div className="work-title">{work.title}</div>
                    <div className="work-meta">
                      <span>–ê–≤—Ç–æ—Ä: {work.author}</span>
                      <span>–î–∞—Ç–∞: {work.date}</span>
                    </div>
                    <div className="similarity-bar">
                      <div 
                        className="bar-fill"
                        style={{ width: `${work.similarity}%` }}
                      ></div>
                      <span>{work.similarity}%</span>
                    </div>
                  </li>
                ))}
              </ul>

              <h3>–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:</h3>
              <div className="text-analysis">
                <div className="highlighted-text">
                  {highlightMatches(results.originalText, results.details)}
                </div>
                <div className="legend">
                  <span><mark className="sample-mark"></mark> –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è</span>
                </div>
              </div>
            </>
          )}
        </div>
      )}
       </div>
  );
}

export default App;